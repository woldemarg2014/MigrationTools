Перем Параметры, ОбщиеПроцедурыФункции;
#Область ПроверкиКорректности

//проверяем наличие дублей, так как дубли кодов в приемник не загрузятся корректно
Функция ПроверитьДублиКодовСправочников(Отчет) Экспорт
	
	ЕстьДубли = Ложь;
	ВыведенаШапкаПроверки = Ложь;
	МакетОформления = ПолучитьМакет("Макет");
	
	МассивПроверяемыхСправочников = Новый Массив; 
	МассивПроверяемыхСправочников.Добавить("Производители");
	МассивПроверяемыхСправочников.Добавить("Номенклатура");
	МассивПроверяемыхСправочников.Добавить("ЕдиницыИзмерения");
	МассивПроверяемыхСправочников.Добавить("КлассификаторЕдиницИзмерения");
	МассивПроверяемыхСправочников.Добавить("ХарактеристикиНоменклатуры");
	МассивПроверяемыхСправочников.Добавить("Модели");
	МассивПроверяемыхСправочников.Добавить("Цвета");
	МассивПроверяемыхСправочников.Добавить("ТипыСалона");
	МассивПроверяемыхСправочников.Добавить("ТипыКузовов");
	МассивПроверяемыхСправочников.Добавить("ТипыКПП");
	МассивПроверяемыхСправочников.Добавить("ТипыДвигателей");
	МассивПроверяемыхСправочников.Добавить("КатегорииТранспортныхСредств");
	МассивПроверяемыхСправочников.Добавить("Автоработы");
	МассивПроверяемыхСправочников.Добавить("ВариантыКомплектации");
	МассивПроверяемыхСправочников.Добавить("Автомобили");
	МассивПроверяемыхСправочников.Добавить("Банки");
	МассивПроверяемыхСправочников.Добавить("Контрагенты");
	МассивПроверяемыхСправочников.Добавить("ДоговорыВзаиморасчетов");
	МассивПроверяемыхСправочников.Добавить("Сотрудники");
	МассивПроверяемыхСправочников.Добавить("Должности");
	МассивПроверяемыхСправочников.Добавить("Организации");
	МассивПроверяемыхСправочников.Добавить("ПодразделенияКомпании");
	МассивПроверяемыхСправочников.Добавить("СкладыКомпании");
	МассивПроверяемыхСправочников.Добавить("Цеха");
	МассивПроверяемыхСправочников.Добавить("БанковскиеСчета");
	МассивПроверяемыхСправочников.Добавить("ПодтверждающиеДокументы");
	МассивПроверяемыхСправочников.Добавить("Карточки");
	МассивПроверяемыхСправочников.Добавить("БонусныеПрограммы");
	МассивПроверяемыхСправочников.Добавить("ТипыЦен");
	МассивПроверяемыхСправочников.Добавить("Опции");
	МассивПроверяемыхСправочников.Добавить("ВидыРемонта");
	МассивПроверяемыхСправочников.Добавить("СервисныеКампании");
	МассивПроверяемыхСправочников.Добавить("ВидыСостоянийЗаказНарядов");
	
	Для каждого Спр Из МассивПроверяемыхСправочников Цикл
		ИмяСправочника = Спр;
		
		#Если Клиент Тогда
			Состояние("Проверка уникальности кодов справочника '" + ИмяСправочника + "'...");
		#КонецЕсли
		
		Если Метаданные.Справочники[ИмяСправочника].КонтрольУникальности Тогда
			
			УникальностьКодовВПределахПодчиненияВладельцу = (Метаданные.Справочники[ИмяСправочника].СерииКодов = Метаданные.СвойстваОбъектов.СерииКодовСправочника.ВПределахПодчиненияВладельцу);
			Если УникальностьКодовВПределахПодчиненияВладельцу Тогда
				ТекстЗапроса = 		  "ВЫБРАТЬ ПЕРВЫЕ 100
				|	" + ИмяСправочника + ".Ссылка КАК Ссылка,
				|	" + ИмяСправочника + ".Владелец.Код КАК ВладелецКод,
				|	ВложенныйЗапрос.ОбщийСВладельцемКод КАК ОбщийСВладельцемКод,
				|	" + ИмяСправочника + ".Код КАК Код,
				|	ВложенныйЗапрос.КолвоДублей КАК КолвоДублей
				|ИЗ
				|	(ВЫБРАТЬ ПЕРВЫЕ 100
				|		" + ИмяСправочника + ".Код + ЕСТЬNULL(" + ИмяСправочника + ".Владелец.Код, """") КАК ОбщийСВладельцемКод,
				|		" + ИмяСправочника + ".Код КАК Код,
				|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + ИмяСправочника + ".Ссылка) КАК КолвоДублей
				|	ИЗ
				|		Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|	
				|	СГРУППИРОВАТЬ ПО
				|		" + ИмяСправочника + ".Код + ЕСТЬNULL(" + ИмяСправочника + ".Владелец.Код, """"),
				|		" + ИмяСправочника + ".Код
				|	
				|	УПОРЯДОЧИТЬ ПО
				|		КолвоДублей УБЫВ) КАК ВложенныйЗапрос
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|		ПО ВложенныйЗапрос.Код = " + ИмяСправочника + ".Код
				|ГДЕ
				|	ВложенныйЗапрос.КолвоДублей > 1";
			Иначе	
				ТекстЗапроса = 		  "ВЫБРАТЬ ПЕРВЫЕ 100
				|	" + ИмяСправочника + ".Ссылка КАК Ссылка,
				|	" + ИмяСправочника + ".Код КАК Код,
				|	" + ИмяСправочника + ".Наименование КАК Наименование,
				|	ВложенныйЗапрос.КолвоДублей КАК КолвоДублей
				|ИЗ
				|	(ВЫБРАТЬ ПЕРВЫЕ 100
				|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + ИмяСправочника + ".Ссылка) КАК КолвоДублей,
				|		" + ИмяСправочника + ".Код КАК Код
				|	ИЗ
				|		Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|	
				|	СГРУППИРОВАТЬ ПО
				|		" + ИмяСправочника + ".Код
				|	
				|	УПОРЯДОЧИТЬ ПО
				|		КолвоДублей УБЫВ) КАК ВложенныйЗапрос
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|		ПО ВложенныйЗапрос.Код = " + ИмяСправочника + ".Код
				|ГДЕ
				|	ВложенныйЗапрос.КолвоДублей > 1";
			КонецЕсли; 
			Запрос = Новый Запрос(ТекстЗапроса);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыгрузкаЗапроса = РезультатЗапроса.Выгрузить();
				КоличествоДублей = ВыгрузкаЗапроса.Количество();
				Если КоличествоДублей > 0 Тогда
					Если НЕ ВыведенаШапкаПроверки Тогда
						ШапкаПроверки = 	МакетОформления.ПолучитьОбласть("ШапкаДублиКодовСправочников");
						ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 1. Обнаружены дубли кодов в справочниках. Перенос данных без ошибок не возможен.
						|Нужно выполнить перенумерацию кодов справочников, содержащих дубли кодов.
						|Это можно сделать вручную, специальной обработкой (которую напишет программист) или с помощью универсальной обработки 'УниверсальныеПодборИОбработкаОбъектов.epf'.
						|Универсальная обработка на сайте ИТС (https://its.1c.ru/db/metod8dev/content/3686/hdoc). Она поможет в том случае, если остальные поля справочников заполнены корректно.";
						Отчет.Вывести(ШапкаПроверки);
						ВыведенаШапкаПроверки = Истина;
					КонецЕсли;
					СтрокаПроверки = МакетОформления.ПолучитьОбласть("СтрокаДублиКодовСправочников");
					СтрокаПроверки.Параметры.ИмяСправочника = ИмяСправочника;
					СтрокаПроверки.Параметры.КоличествоДублей = КоличествоДублей;
					Отчет.Вывести(СтрокаПроверки);
				КонецЕсли; 	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ВыведенаШапкаПроверки Тогда
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаДублиКодовСправочников");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 1. Дубли кодов в справочниках - не обнаружены";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьДубли", ЕстьДубли);
	Возврат СтруктураПараметров;
КонецФункции

//проверяем - нет ли разсинхронизации кодов предопределенных элементов справочника СкладыКомпании
Функция ПроверитьКорректностьСправочникаСкладыКомпании(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	
	//сначала проверим что код предопределенного элемента имеет стандартную длину
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладыКомпании.Код КАК Код
	|ИЗ
	|	Справочник.СкладыКомпании КАК СкладыКомпании
	|ГДЕ
	|	СкладыКомпании.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ СтрДлина(СокрЛП(Выборка.Код)) = 8 Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения),"","|") + "В предопределенном складе базы-источника нарушена стандартная длина кода. Перенумеруйте коды, код предопределенного склада сделайте таким: '00000001'";
			ЕстьОшибки = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	КодПредопред = "";
	НаименованиеПредопр = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладыКомпании.Код КАК Код,
	|	СкладыКомпании.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СкладыКомпании КАК СкладыКомпании
	|ГДЕ
	|	СкладыКомпании.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодПредопред = Выборка.Код;
		НаименованиеПредопр = Выборка.Наименование;
	КонецЦикла;
	
	Если ПустаяСтрока(КодПредопред) Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "Проблемы с предопределенным складом базы-источника: нет предопределенного склада или у него пустой код; ", " нет предопределенного склада или у него пустой код;");
		ЕстьОшибки = Истина;
	КонецЕсли; 
	
	Если (СтрДлина(КодПредопред) < 8) 
		ИЛИ НЕ (СокрЛП(КодПредопред) = "00000001") Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "Проблемы с предопределенным складом базы-источника: длина или значение кода отличается от стандартной, сделайте код таким '00000001'; ", " длина кода или значение кода отличается от стандартной, сделайте код таким '00000001';");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьСкладыКомпании");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 2. Обнаружены проблемы с предопределенными складами в базе-источнике! Перенос данных без ошибок не возможен. " + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьСкладыКомпании");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 2. Проблемы с предопределенными складами в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
КонецФункции

//проверяем - нет ли разсинхронизации кодов предопределенных элементов справочника Номенклатура
//++gavv Ситуация: 
//В приемнике номенклатура с кодами от 00000001 до 00000005 - является предопределенной
//В источнике номенклатура с кодами от 00000001 до 00000005 в конфигураторе является предопределенной, 
//а в рабочей базе коды переопределенных изменены, а коды с 00000001 до 00000005 присвоены другим элемантам и группам.
//при переносе из АА5 в АА6 предопределенная номенклатура должна совпадать, иначе мало ли что напутано в базе-источнике
//либо в базе-источнике нет номенклатуры с кодом предопределенного базы-приемника
Функция ПроверитьКорректностьСправочникаНоменклатура(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	Для К = 1 По 5 Цикл
		ПроверяемыйКод = "0000000" + Формат(К, "ЧЦ=1; ЧО=0");
		НоменклатураИсточника = Справочники.Номенклатура.НайтиПоКоду(ПроверяемыйКод); 
		
		//если не нашли
		Если НоменклатураИсточника.Пустая() Тогда
			Если ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаСообщения = "Проблема в источнике. Выгрузка запрещена! 
				|В базе-источнике нет предопределенной номенклатуры с таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. В приемнике нет предопределенной номенклатуры с кодом:" + СокрЛП(ПроверяемыйКод) + "!";
			Иначе
				СтрокаСообщения = СтрокаСообщения + "
				|-
				|В базе-источнике нет предопределенной номенклатуры с таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. В приемнике нет предопределенной номенклатуры с кодом:" + СокрЛП(ПроверяемыйКод) + "!";
			КонецЕсли;
			Продолжить;
		КонецЕсли; 
		
		//если то что мы нашли - не является предопределенным - то считаем что это для номенклатуры является ошибкой, пусть исправляют в источнике
		Если НЕ НоменклатураИсточника.Предопределенный Тогда
			Если ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаСообщения = "Проблема в источнике. Выгрузка запрещена! 
				|В базе-источнике есть не предопределенная номенклатура таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. Проблемная номенклатура базы источника:" + СокрЛП(НоменклатураИсточника.Наименование) + "!";
			Иначе
				СтрокаСообщения = СтрокаСообщения + "
				|-
				|В базе-источнике есть не предопределенная номенклатура таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. Проблемная номенклатура базы источника:" + СокрЛП(НоменклатураИсточника.Наименование) + "!";
			КонецЕсли;	
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьНоменклатуры");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 3. Обнаружены проблемы с предопределенными номенклатурами в базе-источнике! Перенос данных без ошибок не возможен." + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьНоменклатуры");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 3. Проблемы с предопределенными номенклатурами в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
	
КонецФункции // ()

//проверяем - нет ли разсинхронизации кодов предопределенных элементов справочника Контрагенты
//++gavv - проверим, не заняты ли чужими контрагентами коды предопределенных контрагентов базы-приемника: 00000001, 00000002, 00000003, 00000004
//ньюанс в том что в источнике длина кода 8, а в приемнике 9, в правилах конвертации идет приведение длины кода к приемнику, добавляются 0
//так же возможны ситуации - когда в источнике почему-то сокращены коды, и при приведении к длине источника они дополняться нулями и возникет коллизия
//поэтому проверим несколько вариантов
Функция ПроверитьКорректностьСправочникаКонтрагенты(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	|	Контрагенты.Код КАК Код,
	|	Контрагенты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Предопределенный
	|	И (Контрагенты.Код = ""00000001""
	|			ИЛИ Контрагенты.Код = ""00000002""
	|			ИЛИ Контрагенты.Код = ""00000003""
	|			ИЛИ Контрагенты.Код = ""00000004""
	|			ИЛИ Контрагенты.Код = ""0000001""
	|			ИЛИ Контрагенты.Код = ""0000002""
	|			ИЛИ Контрагенты.Код = ""0000003""
	|			ИЛИ Контрагенты.Код = ""0000004""
	|			ИЛИ Контрагенты.Код = ""000001""
	|			ИЛИ Контрагенты.Код = ""000002""
	|			ИЛИ Контрагенты.Код = ""000003""
	|			ИЛИ Контрагенты.Код = ""000004"")";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СтрокаСообщения = "";
	Пока Выборка.Следующий() Цикл
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения),"","; ") + "Код: " + СокрЛП(Выборка.Код) + ", наименование: " + СокрЛП(Выборка.Наименование);
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = "В базе источнике есть не-предопределенные контрагенты с такими же кодами(в том числе и при приведении к длине кода-приемника), как у предопределенных в базе-приемнике. Нужно изменить коды в этих элементах базы-источника: " + СтрокаСообщения;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьКонтрагенты");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 4. Обнаружены проблемы с предопределенными контрагентами в базе-источнике! Перенос данных без ошибок не возможен." + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьКонтрагенты");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 4. Проблемы с предопределенными контрагентами в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
	
КонецФункции // ()

//проверяем заполнение обязательных реквизитов справочников
//проверяем наиболее объемные справочники
Функция ПроверитьЗаполнениеСправочников(Отчет) Экспорт
	
	МакетОформления = ПолучитьМакет("Макет");
	СтрокаСообщения = "";
	ЕстьОшибки = Ложь;
	
	//++gavv - проверяем - нет ли пустой номенклатуры
	ЗапросПроверкиНоменклатуры = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Справочник.ТипыНоменклатуры.ПустаяСсылка)
	|			ИЛИ Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.ПустаяСсылка)
	|			ИЛИ Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ИЛИ Номенклатура.БазоваяЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ИЛИ Номенклатура.ВалютаУчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ИЛИ Номенклатура.Код ЕСТЬ NULL
	|			ИЛИ Номенклатура.Наименование ЕСТЬ NULL)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления");
	РезультатЗапроса = ЗапросПроверкиНоменклатуры.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'Номенклатура', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'ТипНоменклатуры', 'ВидНоменклатуры', 'СтавкаНДС', 'БазоваяЕдиницаИзмерения', 'ВалютаУчета'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли;
	ЗапросПроверкиНоменклатуры = Неопределено;
	
	//++gavv - проверяем - нет ли пустых контрагентов
	ЗапросПроверкиКонтрагентов = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И (Контрагенты.Код ЕСТЬ NULL
	|			ИЛИ Контрагенты.Наименование ЕСТЬ NULL
	|			ИЛИ Контрагенты.НаименованиеПолное ЕСТЬ NULL
	|			ИЛИ Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ПустаяСсылка)
	|			ИЛИ Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ПустаяСсылка))");
	
	РезультатЗапроса = ЗапросПроверкиКонтрагентов.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'Контрагенты', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'НаименованиеПолное', 'ВидКонтрагента', 'ФормаСобственности'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли;
	ЗапросПроверкиКонтрагентов = Неопределено;
	
	//++gavv - проверяем - нет ли пустых договоров
	ЗапросПроверкиДоговоров = Новый Запрос("ВЫБРАТЬ
	|	ДоговорыВзаиморасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	|ГДЕ
	|	НЕ ДоговорыВзаиморасчетов.ЭтоГруппа
	|	И НЕ ДоговорыВзаиморасчетов.ПометкаУдаления
	|	И (ДоговорыВзаиморасчетов.Код ЕСТЬ NULL
	|			ИЛИ ДоговорыВзаиморасчетов.Наименование ЕСТЬ NULL
	|			ИЛИ ДоговорыВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияКомпании.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплаты.ПустаяСсылка))");
	
	РезультатЗапроса = ЗапросПроверкиДоговоров.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'ДоговорыВзаиморасчетов', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'ВидДоговора', 'ТипДоговора', 'ВалютаВзаиморасчетов', 'Организация', 'Подразделение', 'ЕдиницаИзмеренияАвтоработВПечатныхФормах', 'ВидОплаты'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли; 
	ЗапросПроверкиДоговоров = Неопределено;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаполненияСправочников");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 5. Обнаружены проблемы с заполнением основных справочников! Перенос данных без ошибок не возможен." + Символы.ВК + Символы.ВК + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаполненияСправочников");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 5. Проблемы с заполнением основных справочников в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
	
КонецФункции // ()


//проверяем чтобы остатки автомобиля не развернулись по нескольким партиям 
Функция ПроверитьКорректностьОстатковТоварныхАвтомобилей()
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	СУММА(ОстаткиАвтомобилейОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ОстаткиАвтомобилейОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ОстаткиАвтомобилейОстатки.СуммаНДСОстаток) КАК СуммаНДС,
	|	СУММА(ОстаткиАвтомобилейОстатки.СуммаУпрОстаток) КАК СуммаУпр,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиАвтомобилейОстатки.Партия) КАК КоличествоПартий
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&ДатаСведений, СтатусПартии = &НужныйСтатусПартии) КАК ОстаткиАвтомобилейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(&ДатаСведений, ВидЗначения = &ВидЗначенияВидАвтомобиля) КАК АвтомобилиСрезПоследних
	|		ПО ОстаткиАвтомобилейОстатки.Автомобиль = АвтомобилиСрезПоследних.Автомобиль
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАвтомобилейОстатки.СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.Автомобиль
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоПартий УБЫВ";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаСведений", КонецДня(НаДату));
	Запрос.УстановитьПараметр("НужныйСтатусПартии", Перечисления.СтатусыПартий.ТоварКупленный);
	Запрос.УстановитьПараметр("ВидАвтомобиляСПробегом", Перечисления.ВидАвтомобиля.АвтомобильСПробегом);
	Запрос.УстановитьПараметр("ВидЗначенияВидАвтомобиля", Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПроблемныйАвтомобиль = Выборка.Автомобиль;	
		КоличествоПартий = Выборка.КоличествоПартий;
		СтрокаСообщения = "Проблема с остатками автомобилей. Как минимум, автомобиль: " + СокрЛП(ПроблемныйАвтомобиль) + " числится в остатке более чем по одной партии!
		|Более подробно можно посмотреть отчетом по остаткам автомобилей, с группировкой по автомобилям и партиям.
		|Скорее всего нарушена последовательность редактирования данных.
		|Сверка данных с новой программой после миграции будет затруднена, информация будет различаться.";
		Сообщить(СтрокаСообщения,СтатусСообщения.Важное);
	КонецЕсли; 
КонецФункции // ()

#КонецОбласти 

#Область ОценкаОбъема

Функция ПодсчетСправочников(Отчет) Экспорт
	//Отчет = новый ТабличныйДокумент;
	
	МакетОформления = ПолучитьМакет("Макет");
	ШапкаПодсчетаСправочников = МакетОформления.ПолучитьОбласть("ШапкаПодсчетаСправочников");
	Отчет.Вывести(ШапкаПодсчетаСправочников);
	Отчет.НачатьГруппуСтрок("Количество справочников", Ложь);
	
	ТаблЗнач = Новый ТаблицаЗначений;
	ТаблЗнач.Колонки.Добавить("ИмяСправочника");
	ТаблЗнач.Колонки.Добавить("КоличествоЗаписей");
	ШаблонТекстЗапроса = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ XYZ.Ссылка) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.XYZ КАК XYZ";
	Запрос = Новый Запрос;
	Для каждого Спр Из Метаданные.Справочники Цикл
		КоличествоЗаписей = 0;
		ИмяСправочника = Спр.Имя;
		ТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "XYZ", ИмяСправочника);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоЗаписей = Выборка.КоличествоЗаписей;
		КонецЕсли;
		
		НовСтр = ТаблЗнач.Добавить();
		НовСтр.ИмяСправочника = ИмяСправочника;
		НовСтр.КоличествоЗаписей = КоличествоЗаписей;
	КонецЦикла; 
	
	ТаблЗнач.Сортировать("КоличествоЗаписей Убыв");
	Для каждого СтрТаблЗнач Из ТаблЗнач Цикл
		ИмяСправочника = СтрТаблЗнач.ИмяСправочника;
		КоличествоЗаписей = СтрТаблЗнач.КоличествоЗаписей;	
		СтрокаПодсчетаСправочников = МакетОформления.ПолучитьОбласть("СтрокаПодсчетаСправочников");
		СтрокаПодсчетаСправочников.Параметры.ИмяСправочника = ИмяСправочника;
		СтрокаПодсчетаСправочников.Параметры.КоличествоЗаписей = КоличествоЗаписей;
		Отчет.Вывести(СтрокаПодсчетаСправочников);
	КонецЦикла; 
	Отчет.ЗакончитьГруппуСтрок();
	Возврат Истина;
КонецФункции // ()

#КонецОбласти 

#Область Общее

Процедура ЗаполнитьВидыПроверок() Экспорт
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "1. Дублирование кодов в справочниках";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "2. Разсинхронизация в предопределенных элементах справочника 'СкладыКомпании'";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "3. Разсинхронизация в предопределенных элементах справочника 'Номенклатура'";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "4. Разсинхронизация в предопределенных элементах справочника 'Контрагенты'";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "5. Проверка заполнения обязательных реквизитов в основных справочниках";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "Разсинхронизация кодов в предопределенных элементах и группах справочников";
	НС.Проверять = Истина;
	
КонецПроцедуры

#КонецОбласти 

//++gavv проверим - нет ли в базе-источнике элементов справочников с одинаковыми кодами
СтрокаСообщения = "";
Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
	Отказ = Истина;
	СтрокаСообщения = "Дубли кодов в справочниках: " + СтрокаСообщения;
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Дубли", "Выгрузка не возможна! Справочники базы-источника содержат дубли по кодам: " + СтрокаСообщения + ".
	|Перед выгрузкой нужно выполнить перенумерацию кодов справочников, содержащих дубли кодов.
	|Это можно сделать вручную, специальной обработкой или с помощью универсальной обработки 'УниверсальныеПодборИОбработкаОбъектов.epf', которую можно найти на сайте ИТС (https://its.1c.ru/db/metod8dev/content/3686/hdoc)");
	ОбщиеПроцедурыФункции.ЗаписатьВПротоколВыполнения(СтрокаСообщения, СтруктураЗаписи, Истина, , ,Истина);
КонецЕсли; 
