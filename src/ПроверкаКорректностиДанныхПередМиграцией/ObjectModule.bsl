#Область ПроверкиКорректностиСправочников

//проверяем наличие дублей, так как дубли кодов в приемник не загрузятся корректно
Функция ПроверитьДублиКодовСправочников(Отчет) Экспорт
	
	ЕстьДубли = Ложь;
	ВыведенаШапкаПроверки = Ложь;
	МакетОформления = ПолучитьМакет("Макет");
	
	МассивПроверяемыхСправочников = Новый Массив; 
	МассивПроверяемыхСправочников.Добавить("Производители");
	МассивПроверяемыхСправочников.Добавить("Номенклатура");
	МассивПроверяемыхСправочников.Добавить("ЕдиницыИзмерения");
	МассивПроверяемыхСправочников.Добавить("КлассификаторЕдиницИзмерения");
	МассивПроверяемыхСправочников.Добавить("ХарактеристикиНоменклатуры");
	МассивПроверяемыхСправочников.Добавить("Модели");
	МассивПроверяемыхСправочников.Добавить("Цвета");
	МассивПроверяемыхСправочников.Добавить("ТипыСалона");
	МассивПроверяемыхСправочников.Добавить("ТипыКузовов");
	МассивПроверяемыхСправочников.Добавить("ТипыКПП");
	МассивПроверяемыхСправочников.Добавить("ТипыДвигателей");
	МассивПроверяемыхСправочников.Добавить("КатегорииТранспортныхСредств");
	МассивПроверяемыхСправочников.Добавить("Автоработы");
	МассивПроверяемыхСправочников.Добавить("ВариантыКомплектации");
	МассивПроверяемыхСправочников.Добавить("Автомобили");
	МассивПроверяемыхСправочников.Добавить("Банки");
	МассивПроверяемыхСправочников.Добавить("Контрагенты");
	МассивПроверяемыхСправочников.Добавить("ДоговорыВзаиморасчетов");
	МассивПроверяемыхСправочников.Добавить("Сотрудники");
	МассивПроверяемыхСправочников.Добавить("Должности");
	МассивПроверяемыхСправочников.Добавить("Организации");
	МассивПроверяемыхСправочников.Добавить("ПодразделенияКомпании");
	МассивПроверяемыхСправочников.Добавить("СкладыКомпании");
	МассивПроверяемыхСправочников.Добавить("Цеха");
	МассивПроверяемыхСправочников.Добавить("БанковскиеСчета");
	МассивПроверяемыхСправочников.Добавить("ПодтверждающиеДокументы");
	МассивПроверяемыхСправочников.Добавить("Карточки");
	МассивПроверяемыхСправочников.Добавить("БонусныеПрограммы");
	МассивПроверяемыхСправочников.Добавить("ТипыЦен");
	МассивПроверяемыхСправочников.Добавить("Опции");
	МассивПроверяемыхСправочников.Добавить("ВидыРемонта");
	МассивПроверяемыхСправочников.Добавить("СервисныеКампании");
	МассивПроверяемыхСправочников.Добавить("ВидыСостоянийЗаказНарядов");
	
	Для каждого Спр Из МассивПроверяемыхСправочников Цикл
		ИмяСправочника = Спр;
		
		#Если Клиент Тогда
			Состояние("Проверка уникальности кодов справочника '" + ИмяСправочника + "'...");
		#КонецЕсли
		КонтрольУникальности = Метаданные.Справочники[ИмяСправочника].КонтрольУникальности;
		УникальностьКодовВПределахПодчиненияВладельцу = (Метаданные.Справочники[ИмяСправочника].СерииКодов = Метаданные.СвойстваОбъектов.СерииКодовСправочника.ВПределахПодчиненияВладельцу);
		
		//особенность справочника Банки в том, что в базе-приемнике коды должны быть уникальны
		Если ИмяСправочника = "Банки" Тогда
			КонтрольУникальности = Истина;
			УникальностьКодовВПределахПодчиненияВладельцу = Ложь;
		КонецЕсли; 
		
		Если КонтрольУникальности Тогда
			
			Если УникальностьКодовВПределахПодчиненияВладельцу Тогда
				ТекстЗапроса = 		  "ВЫБРАТЬ ПЕРВЫЕ 100
				|	" + ИмяСправочника + ".Ссылка КАК Ссылка,
				|	" + ИмяСправочника + ".Владелец.Код КАК ВладелецКод,
				|	ВложенныйЗапрос.ОбщийСВладельцемКод КАК ОбщийСВладельцемКод,
				|	" + ИмяСправочника + ".Код КАК Код,
				|	ВложенныйЗапрос.КолвоДублей КАК КолвоДублей
				|ИЗ
				|	(ВЫБРАТЬ ПЕРВЫЕ 100
				|		" + ИмяСправочника + ".Код + ЕСТЬNULL(" + ИмяСправочника + ".Владелец.Код, """") КАК ОбщийСВладельцемКод,
				|		" + ИмяСправочника + ".Код КАК Код,
				|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + ИмяСправочника + ".Ссылка) КАК КолвоДублей
				|	ИЗ
				|		Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|	
				|	СГРУППИРОВАТЬ ПО
				|		" + ИмяСправочника + ".Код + ЕСТЬNULL(" + ИмяСправочника + ".Владелец.Код, """"),
				|		" + ИмяСправочника + ".Код
				|	
				|	УПОРЯДОЧИТЬ ПО
				|		КолвоДублей УБЫВ) КАК ВложенныйЗапрос
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|		ПО ВложенныйЗапрос.Код = " + ИмяСправочника + ".Код
				|ГДЕ
				|	ВложенныйЗапрос.КолвоДублей > 1";
			Иначе	
				ТекстЗапроса = 		  "ВЫБРАТЬ ПЕРВЫЕ 100
				|	" + ИмяСправочника + ".Ссылка КАК Ссылка,
				|	" + ИмяСправочника + ".Код КАК Код,
				|	" + ИмяСправочника + ".Наименование КАК Наименование,
				|	ВложенныйЗапрос.КолвоДублей КАК КолвоДублей
				|ИЗ
				|	(ВЫБРАТЬ ПЕРВЫЕ 100
				|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + ИмяСправочника + ".Ссылка) КАК КолвоДублей,
				|		" + ИмяСправочника + ".Код КАК Код
				|	ИЗ
				|		Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|	
				|	СГРУППИРОВАТЬ ПО
				|		" + ИмяСправочника + ".Код
				|	
				|	УПОРЯДОЧИТЬ ПО
				|		КолвоДублей УБЫВ) КАК ВложенныйЗапрос
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
				|		ПО ВложенныйЗапрос.Код = " + ИмяСправочника + ".Код
				|ГДЕ
				|	ВложенныйЗапрос.КолвоДублей > 1";
			КонецЕсли; 
			Запрос = Новый Запрос(ТекстЗапроса);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыгрузкаЗапроса = РезультатЗапроса.Выгрузить();
				КоличествоДублей = ВыгрузкаЗапроса.Количество();
				Если КоличествоДублей > 0 Тогда
					Если НЕ ВыведенаШапкаПроверки Тогда
						ШапкаПроверки = 	МакетОформления.ПолучитьОбласть("ШапкаДублиКодовСправочников");
						ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 1. Обнаружены дубли кодов в справочниках. Перенос данных без ошибок не возможен.
						|Нужно выполнить перенумерацию кодов справочников, содержащих дубли кодов.
						|Это можно сделать вручную, специальной обработкой (которую напишет программист) или с помощью универсальной обработки 'УниверсальныеПодборИОбработкаОбъектов.epf'.
						|Универсальная обработка на сайте ИТС (https://its.1c.ru/db/metod8dev/content/3686/hdoc). Она поможет в том случае, если остальные поля справочников заполнены корректно.";
						Отчет.Вывести(ШапкаПроверки);
						ВыведенаШапкаПроверки = Истина;
					КонецЕсли;
					СтрокаПроверки = МакетОформления.ПолучитьОбласть("СтрокаДублиКодовСправочников");
					СтрокаПроверки.Параметры.ИмяСправочника = ИмяСправочника;
					СтрокаПроверки.Параметры.КоличествоДублей = КоличествоДублей;
					Отчет.Вывести(СтрокаПроверки);
				КонецЕсли; 	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ВыведенаШапкаПроверки Тогда
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаДублиКодовСправочников");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 1. Дубли кодов в справочниках - не обнаружены";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьДубли", ЕстьДубли);
	Возврат СтруктураПараметров;
КонецФункции

//проверяем - нет ли разсинхронизации кодов предопределенных элементов справочника СкладыКомпании
Функция ПроверитьКорректностьСправочникаСкладыКомпании(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	#Если Клиент Тогда
		Состояние("Проверка корректности справочника 'СкладыКомпании'...");
	#КонецЕсли
	
	//сначала проверим что код предопределенного элемента имеет стандартную длину
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладыКомпании.Код КАК Код
	|ИЗ
	|	Справочник.СкладыКомпании КАК СкладыКомпании
	|ГДЕ
	|	СкладыКомпании.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ СтрДлина(СокрЛП(Выборка.Код)) = 8 Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения),"","|") + "В предопределенном складе базы-источника нарушена стандартная длина кода. Перенумеруйте коды, код предопределенного склада сделайте таким: '00000001'";
			ЕстьОшибки = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	КодПредопред = "";
	НаименованиеПредопр = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладыКомпании.Код КАК Код,
	|	СкладыКомпании.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СкладыКомпании КАК СкладыКомпании
	|ГДЕ
	|	СкладыКомпании.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодПредопред = Выборка.Код;
		НаименованиеПредопр = Выборка.Наименование;
	КонецЦикла;
	
	Если ПустаяСтрока(КодПредопред) Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "Проблемы с предопределенным складом базы-источника: нет предопределенного склада или у него пустой код; ", " нет предопределенного склада или у него пустой код;");
		ЕстьОшибки = Истина;
	КонецЕсли; 
	
	Если (СтрДлина(КодПредопред) < 8) 
		ИЛИ НЕ (СокрЛП(КодПредопред) = "00000001") Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "Проблемы с предопределенным складом базы-источника: длина или значение кода отличается от стандартной, сделайте код таким '00000001'; ", " длина кода или значение кода отличается от стандартной, сделайте код таким '00000001';");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьСкладыКомпании");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 2. Обнаружены проблемы с предопределенными складами в базе-источнике! Перенос данных без ошибок не возможен. " + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьСкладыКомпании");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 2. Проблемы с предопределенными складами в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
КонецФункции

//проверяем - нет ли разсинхронизации кодов предопределенных элементов справочника Номенклатура
//++gavv Ситуация: 
//В приемнике номенклатура с кодами от 00000001 до 00000005 - является предопределенной
//В источнике номенклатура с кодами от 00000001 до 00000005 в конфигураторе является предопределенной, 
//а в рабочей базе коды переопределенных изменены, а коды с 00000001 до 00000005 присвоены другим элемантам и группам.
//при переносе из АА5 в АА6 предопределенная номенклатура должна совпадать, иначе мало ли что напутано в базе-источнике
//либо в базе-источнике нет номенклатуры с кодом предопределенного базы-приемника
Функция ПроверитьКорректностьСправочникаНоменклатура(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	#Если Клиент Тогда
		Состояние("Проверка корректности справочника 'Номенклатура'...");
	#КонецЕсли
	
	Для К = 1 По 5 Цикл
		ПроверяемыйКод = "0000000" + Формат(К, "ЧЦ=1; ЧО=0");
		НоменклатураИсточника = Справочники.Номенклатура.НайтиПоКоду(ПроверяемыйКод); 
		
		//если не нашли
		Если НоменклатураИсточника.Пустая() Тогда
			Если ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаСообщения = "Проблема в источнике. Выгрузка запрещена! 
				|В базе-источнике нет предопределенной номенклатуры с таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. В приемнике нет предопределенной номенклатуры с кодом:" + СокрЛП(ПроверяемыйКод) + "!";
			Иначе
				СтрокаСообщения = СтрокаСообщения + "
				|-
				|В базе-источнике нет предопределенной номенклатуры с таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. В приемнике нет предопределенной номенклатуры с кодом:" + СокрЛП(ПроверяемыйКод) + "!";
			КонецЕсли;
			Продолжить;
		КонецЕсли; 
		
		//если то что мы нашли - не является предопределенным - то считаем что это для номенклатуры является ошибкой, пусть исправляют в источнике
		Если НЕ НоменклатураИсточника.Предопределенный Тогда
			Если ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаСообщения = "Проблема в источнике. Выгрузка запрещена! 
				|В базе-источнике есть не предопределенная номенклатура таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. Проблемная номенклатура базы источника:" + СокрЛП(НоменклатураИсточника.Наименование) + "!";
			Иначе
				СтрокаСообщения = СтрокаСообщения + "
				|-
				|В базе-источнике есть не предопределенная номенклатура таким же кодом '" + ПроверяемыйКод + "', как код предопределенной номенклатуры в базе-приемнике.
				|Нужно изменить сделать коды предопределенных элементов в базе источнике такими же, как и в базе приемнике. Проблемная номенклатура базы источника:" + СокрЛП(НоменклатураИсточника.Наименование) + "!";
			КонецЕсли;	
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьНоменклатуры");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 3. Обнаружены проблемы с предопределенными номенклатурами в базе-источнике! Перенос данных без ошибок не возможен." + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьНоменклатуры");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 3. Проблемы с предопределенными номенклатурами в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
	
КонецФункции // ()

//проверяем - нет ли разсинхронизации кодов предопределенных элементов справочника Контрагенты
//++gavv - проверим, не заняты ли чужими контрагентами коды предопределенных контрагентов базы-приемника: 00000001, 00000002, 00000003, 00000004
//ньюанс в том что в источнике длина кода 8, а в приемнике 9, в правилах конвертации идет приведение длины кода к приемнику, добавляются 0
//так же возможны ситуации - когда в источнике почему-то сокращены коды, и при приведении к длине источника они дополняться нулями и возникет коллизия
//поэтому проверим несколько вариантов
Функция ПроверитьКорректностьСправочникаКонтрагенты(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	#Если Клиент Тогда
		Состояние("Проверка корректности справочника 'Контрагенты'...");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	|	Контрагенты.Код КАК Код,
	|	Контрагенты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Предопределенный
	|	И (Контрагенты.Код = ""00000001""
	|			ИЛИ Контрагенты.Код = ""00000002""
	|			ИЛИ Контрагенты.Код = ""00000003""
	|			ИЛИ Контрагенты.Код = ""00000004""
	|			ИЛИ Контрагенты.Код = ""0000001""
	|			ИЛИ Контрагенты.Код = ""0000002""
	|			ИЛИ Контрагенты.Код = ""0000003""
	|			ИЛИ Контрагенты.Код = ""0000004""
	|			ИЛИ Контрагенты.Код = ""000001""
	|			ИЛИ Контрагенты.Код = ""000002""
	|			ИЛИ Контрагенты.Код = ""000003""
	|			ИЛИ Контрагенты.Код = ""000004"")";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СтрокаСообщения = "";
	Пока Выборка.Следующий() Цикл
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения),"","; ") + "Код: " + СокрЛП(Выборка.Код) + ", наименование: " + СокрЛП(Выборка.Наименование);
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = "В базе источнике есть не-предопределенные контрагенты с такими же кодами(в том числе и при приведении к длине кода-приемника), как у предопределенных в базе-приемнике. Нужно изменить коды в этих элементах базы-источника: " + СтрокаСообщения;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьКонтрагенты");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 4. Обнаружены проблемы с предопределенными контрагентами в базе-источнике! Перенос данных без ошибок не возможен." + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьКонтрагенты");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 4. Проблемы с предопределенными контрагентами в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
	
КонецФункции // ()

//проверяем заполнение обязательных реквизитов справочников
//проверяем наиболее объемные справочники
Функция ПроверитьЗаполнениеСправочников(Отчет) Экспорт
	
	ПроверитьЗаполнениеОбязательныхРеквизитовСправочников(Отчет);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", Ложь);
	Возврат СтруктураПараметров;
	
	МакетОформления = ПолучитьМакет("Макет");
	СтрокаСообщения = "";
	ЕстьОшибки = Ложь;
	
	#Если Клиент Тогда
		Состояние("Проверка корректности заполнения основных справочников...");
	#КонецЕсли
	
	//++gavv - проверяем - нет ли пустой номенклатуры
	ЗапросПроверкиНоменклатуры = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Справочник.ТипыНоменклатуры.ПустаяСсылка)
	|			ИЛИ Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.ПустаяСсылка)
	|			ИЛИ Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ИЛИ Номенклатура.БазоваяЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ИЛИ Номенклатура.ВалютаУчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ИЛИ Номенклатура.Код ЕСТЬ NULL
	|			ИЛИ Номенклатура.Наименование ЕСТЬ NULL)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления");
	РезультатЗапроса = ЗапросПроверкиНоменклатуры.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'Номенклатура', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'ТипНоменклатуры', 'ВидНоменклатуры', 'СтавкаНДС', 'БазоваяЕдиницаИзмерения', 'ВалютаУчета'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли;
	ЗапросПроверкиНоменклатуры = Неопределено;
	
	//++gavv - проверяем - нет ли пустых контрагентов
	ЗапросПроверкиКонтрагентов = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И (Контрагенты.Код ЕСТЬ NULL
	|			ИЛИ Контрагенты.Наименование ЕСТЬ NULL
	|			ИЛИ Контрагенты.НаименованиеПолное ЕСТЬ NULL
	|			ИЛИ Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ПустаяСсылка)
	|			ИЛИ Контрагенты.ФормаСобственности = ЗНАЧЕНИЕ(Перечисление.ФормыСобственности.ПустаяСсылка))");
	
	РезультатЗапроса = ЗапросПроверкиКонтрагентов.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'Контрагенты', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'НаименованиеПолное', 'ВидКонтрагента', 'ФормаСобственности'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли;
	ЗапросПроверкиКонтрагентов = Неопределено;
	
	//++gavv - проверяем - нет ли пустых договоров
	ЗапросПроверкиДоговоров = Новый Запрос("ВЫБРАТЬ
	|	ДоговорыВзаиморасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
	|ГДЕ
	|	НЕ ДоговорыВзаиморасчетов.ЭтоГруппа
	|	И НЕ ДоговорыВзаиморасчетов.ПометкаУдаления
	|	И (ДоговорыВзаиморасчетов.Код ЕСТЬ NULL
	|			ИЛИ ДоговорыВзаиморасчетов.Наименование ЕСТЬ NULL
	|			ИЛИ ДоговорыВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияКомпании.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ЕдиницаИзмеренияАвтоработВПечатныхФормах.ПустаяСсылка)
	|			ИЛИ ДоговорыВзаиморасчетов.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплаты.ПустаяСсылка))");
	
	РезультатЗапроса = ЗапросПроверкиДоговоров.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'ДоговорыВзаиморасчетов', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'ВидДоговора', 'ТипДоговора', 'ВалютаВзаиморасчетов', 'Организация', 'Подразделение', 'ЕдиницаИзмеренияАвтоработВПечатныхФормах', 'ВидОплаты'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли; 
	ЗапросПроверкиДоговоров = Неопределено;
	
	//++gavv - проверяем - нет ли пустых авторабот
	ЗапросПроверкиАвторабот = Новый Запрос("ВЫБРАТЬ
	|	Автоработы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Автоработы КАК Автоработы
	|ГДЕ
	|	НЕ Автоработы.ЭтоГруппа
	|	И НЕ Автоработы.ПометкаУдаления
	|	И (Автоработы.Код ЕСТЬ NULL
	|			ИЛИ Автоработы.Наименование ЕСТЬ NULL
	|			ИЛИ Автоработы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))");
	
	РезультатЗапроса = ЗапросПроверкиАвторабот.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'Автоработы', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'Номенклатура'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли; 
	ЗапросПроверкиАвторабот = Неопределено;
	
	//++gavv - проверяем - нет ли пустых Автомобилей
	ЗапросПроверкиАвтомобилей = Новый Запрос("ВЫБРАТЬ
	|	Автомобили.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Автомобили КАК Автомобили
	|ГДЕ
	|	НЕ Автомобили.ЭтоГруппа
	|	И НЕ Автомобили.ПометкаУдаления
	|	И (Автомобили.Код ЕСТЬ NULL
	|			ИЛИ Автомобили.Наименование ЕСТЬ NULL
	|			ИЛИ Автомобили.Модель = ЗНАЧЕНИЕ(Справочник.Модели.ПустаяСсылка))");
	
	РезультатЗапроса = ЗапросПроверкиАвтомобилей.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника 'ЗапросПроверкиАвтомобилей', 
		|в которых не заполнены какие-то основные реквизиты: 'Код', 'Наименование', 'Модель'.
		|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
		|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
		ЕстьОшибки = Истина;
	КонецЕсли; 
	ЗапросПроверкиАвтомобилей = Неопределено;
	
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаполненияСправочников");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 5. Обнаружены проблемы с заполнением основных справочников! Перенос данных без ошибок не возможен." + Символы.ВК + Символы.ВК + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаполненияСправочников");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 5. Проблемы с заполнением основных справочников в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
	
КонецФункции // ()

Функция ПроверитьЗаполнениеОбязательныхРеквизитовСправочников(Отчет)
	
	МакетОформления = ПолучитьМакет("Макет");
	ВыведенаШапкаПроверки = Ложь;
	КоличествоПроблемных = 0;
	
	ЕстьОшибки = Ложь;
	ПроверочныйЗапрос = Новый Запрос;
	Массив = Новый Массив;
	Массив.Добавить("Организации");
	Массив.Добавить("ПодразделенияКомпании");
	Массив.Добавить("Пользователи");
	Массив.Добавить("БанковскиеСчета");
	Массив.Добавить("Валюты");
	Массив.Добавить("Контрагенты");
	Массив.Добавить("Должности");
	Массив.Добавить("ИсточникиИнформации");
	Массив.Добавить("Сотрудники");
	Массив.Добавить("Цеха");
	Массив.Добавить("СкладыКомпании");
	Массив.Добавить("КлассификаторЕдиницИзмерения");
	Массив.Добавить("ТипыЦен");
	Массив.Добавить("Банки");
	Массив.Добавить("ЕдиницыИзмерения");
	Массив.Добавить("Номенклатура");
	Массив.Добавить("ТипыНоменклатуры");
	Массив.Добавить("КлассификаторТНВЭД");
	Массив.Добавить("Производители");
	Массив.Добавить("СтавкиНДС");
	Массив.Добавить("КлассификаторСтранМира");
	Массив.Добавить("ТипыМаркировки");
	Массив.Добавить("ВидыКонтактнойИнформации");
	Массив.Добавить("ВидыКонтактнойИнформации");
	Массив.Добавить("ВидыКонтактнойИнформации");
	Массив.Добавить("ВидыКонтактнойИнформации");
	Массив.Добавить("ХарактеристикиНоменклатуры");
	Массив.Добавить("ЯчейкиХранения");
	Массив.Добавить("ДоговорыВзаиморасчетов");
	Массив.Добавить("ГТД");
	Массив.Добавить("ХозОперации");
	Массив.Добавить("ПодтверждающиеДокументы");
	Массив.Добавить("Автомобили");
	Массив.Добавить("ВариантыКомплектации");
	Массив.Добавить("Модели");
	Массив.Добавить("Автоработы");
	Массив.Добавить("КатегорииТранспортныхСредств");
	Массив.Добавить("ТипыДвигателей");
	Массив.Добавить("ТипыКПП");
	Массив.Добавить("ТипыКузовов");
	Массив.Добавить("ТипыСалона");
	Массив.Добавить("Цвета");
	Массив.Добавить("ТипыЭксплуатации");
	Массив.Добавить("ПрочиеАктивы");
	Массив.Добавить("ТипыСкидок");
	Массив.Добавить("ВидыРемонта");
	Массив.Добавить("ВидыСостоянийЗаказНарядов");
	Массив.Добавить("Карточки");
	Массив.Добавить("БонусныеПрограммы");
	Массив.Добавить("Нормочасы");
	Массив.Добавить("СтатусыАвтомобилей");
	Массив.Добавить("ВидыВзаимоотношений");
	Массив.Добавить("ПричиныОтказаОтОбслуживания");
	Массив.Добавить("Опции");
	Массив.Добавить("СервисныеКампании");
	
	Для каждого ЭлМассива Из Массив Цикл
		
		СтрокаСообщения = "";
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	Sprav.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Sprav КАК Sprav
		|ГДЕ
		|	НЕ Sprav.ПометкаУдаления";
		
		ИмяСправочника = ЭлМассива;
		ПроверяемГруппы = Метаданные.Справочники[ИмяСправочника].Иерархический;
		Если ПроверяемГруппы Тогда
			ПроверяемГруппы = (Метаданные.Справочники[ИмяСправочника].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов); 		
		КонецЕсли; 
		
		ОбъектСправочника = Справочники[ИмяСправочника].СоздатьЭлемент();
		//ОбъектСправочника = Справочники.Организации.СоздатьЭлемент();
		
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "Sprav", ИмяСправочника);
		
		Если ПроверяемГруппы Тогда
			ШаблонТекстаЗапроса = ШаблонТекстаЗапроса + " 	
			|	И НЕ " + ИмяСправочника + ".ЭтоГруппа";
		КонецЕсли; 
		
		ОбязательныеРеквизиты = ОбъектСправочника.ПолучитьОбязательныеРеквизиты(Истина);
		
		Приставка = "";
		СписокОбязатРеквизитов = "";
		Для каждого ЭлСтруктуры Из ОбязательныеРеквизиты Цикл
			
			//пока не проверяем обязательность заполнения ТЧ
			Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Структура") Тогда
				ИмяТЧ = ЭлСтруктуры.Ключ;
				Для каждого ЭлТЧ Из ЭлСтруктуры.Значение Цикл	
					ОбРеквизитТЧ = ЭлТЧ.Ключ;
					
					ТипРеквТЧ = Метаданные.Справочники[ИмяСправочника].ТабличныеЧасти[ИмяТЧ].Реквизиты[ОбРеквизитТЧ].Тип;
					ТипыРеквТЧ = ТипРеквТЧ.Типы();
					Если ТипыРеквТЧ.Количество() > 0 Тогда
						СтрТипТЧ = Строка(ТипРеквТЧ.Типы()[0]);
						Если СтрТипТЧ = "Строка" Тогда
							ВидУсловияТЧ = " ЕСТЬ NULL";
						ИначеЕсли СтрТипТЧ = "Число" Тогда
							ВидУсловияТЧ = " ЕСТЬ NULL";
						ИначеЕсли СтрТипТЧ = "Дата" Тогда
							ВидУсловияТЧ = " = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
						ИначеЕсли СтрТипТЧ = "Булево" Тогда
							Продолжить;
						Иначе
							ПолноеИмя = Метаданные.НайтиПоТипу(ТипРеквТЧ.Типы()[0]).ПолноеИмя();
							Если Найти(ПолноеИмя, "Справочник") > 0
								ИЛИ Найти(ПолноеИмя, "Перечисление") > 0 Тогда
								ВидУсловияТЧ = " = ЗНАЧЕНИЕ(" + ПолноеИмя + ".ПустаяСсылка)";
							Иначе
								Продолжить;
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли;
					Если Найти(Строка(ТипРеквТЧ), "Строка") Тогда
						ВидУсловияТЧ = " ЕСТЬ NULL";
					КонецЕсли;
					
					СписокОбязатРеквизитов = СписокОбязатРеквизитов + "'" + ИмяТЧ + "." + ОбРеквизитТЧ + "', ";
					
					Если Приставка = "" Тогда
						Приставка = " И (";
					Иначе	
						Приставка = " ИЛИ ";
					КонецЕсли; 
					
					УсловиеТЧ = Приставка + ИмяСправочника + "." + ИмяТЧ + "." + ОбРеквизитТЧ + ВидУсловияТЧ;
					
					ШаблонТекстаЗапроса = ШаблонТекстаЗапроса + УсловиеТЧ;
					
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			ОбРеквизит = ЭлСтруктуры.Ключ;
			Если ОбРеквизит = "Код" Тогда
				ВидУсловия = " ЕСТЬ NULL";
			ИначеЕсли ОбРеквизит = "Наименование" Тогда
				ВидУсловия = " ЕСТЬ NULL";
			Иначе //определяем тип чтобы правильно задать условие
				Тип = Метаданные.Справочники[ИмяСправочника].Реквизиты[ОбРеквизит].Тип;
				Типы = Тип.Типы();
				Если Типы.Количество() > 0 Тогда
					СтрТип = Строка(Тип.Типы()[0]);
					Если СтрТип = "Строка" Тогда
						ВидУсловия = " ЕСТЬ NULL";
					ИначеЕсли СтрТип = "Число" Тогда
						ВидУсловия = " ЕСТЬ NULL";
					ИначеЕсли СтрТип = "Дата" Тогда
						ВидУсловия = " = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
					ИначеЕсли СтрТип = "Булево" Тогда
						Продолжить;
					Иначе
						ПолноеИмя = Метаданные.НайтиПоТипу(Тип.Типы()[0]).ПолноеИмя();
						Если Найти(ПолноеИмя, "Справочник") > 0
							ИЛИ Найти(ПолноеИмя, "Перечисление") > 0 Тогда
							ВидУсловия = " = ЗНАЧЕНИЕ(" + ПолноеИмя + ".ПустаяСсылка)";
						Иначе
							Продолжить;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				
				//ИЛИ Номенклатура.БазоваяЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
				//ИЛИ Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ПустаяСсылка)
				Если Найти(Строка(Тип), "Строка") Тогда
					ВидУсловия = " ЕСТЬ NULL";
				КонецЕсли;
			КонецЕсли; 
			
			СписокОбязатРеквизитов = СписокОбязатРеквизитов + "'" + ОбРеквизит + "', ";
			
			Если Приставка = "" Тогда
				Приставка = " И (";
			Иначе	
				Приставка = " ИЛИ ";
			КонецЕсли; 
			Условие = Приставка + ИмяСправочника + "." + ОбРеквизит + ВидУсловия;
			
			ШаблонТекстаЗапроса = ШаблонТекстаЗапроса + Условие;
			
		КонецЦикла; 
		Если Не ПустаяСтрока(Приставка) Тогда
			ШаблонТекстаЗапроса = ШаблонТекстаЗапроса + ")";
		КонецЕсли; 
		
		ПроверочныйЗапрос.Текст = ШаблонТекстаЗапроса;
		
		Если ПустаяСтрока(СписокОбязатРеквизитов) Тогда
			Продолжить;
		КонецЕсли; 
		
		РезультатЗапроса = ПроверочныйЗапрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ВК + Символы.ВК) + "База-источник содержит не помеченные на удаление элементы справочника '" + ИмяСправочника + "', 
			|в которых не заполнены какие-то основные реквизиты: " + СписокОбязатРеквизитов + ".
			|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
			|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.";
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Если НЕ ВыведенаШапкаПроверки Тогда
				ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаполненияСправочников");
				ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 5. Есть проблемы с заполнением обязательных реквизитов основных справочников в базе-источнике. База-источник содержит не помеченные на удаление элементы справочника
				|в которых не заполнены какие-то основные реквизиты.
				|При попытке загрузить данные, которые содержат ссылки на эти справочники - может возникнуть ошибка и загрузка будет прервана. 
				|Рекомендуем правильно заполнить проблемные элементы или исключить их из выгрузки.
				|Если делать загрузку в режиме 'Обмен данными' - то вы сразу захламите базу!";
				Отчет.Вывести(ШапкаПроверки);
				ВыведенаШапкаПроверки = Истина;
				Отчет.НачатьГруппуСтрок("Количество проблемных справочников", Ложь);
			КонецЕсли; 
			Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаКорректностьЗаполненияСправочников = МакетОформления.ПолучитьОбласть("СтрокаКорректностьЗаполненияСправочников");
				СтрокаКорректностьЗаполненияСправочников.Параметры.ТекстСтрокиПроверки = "'" + ИмяСправочника + "', реквизиты: " + СписокОбязатРеквизитов;
				СтрокаКорректностьЗаполненияСправочников.Параметры.ТекстПроверочногоЗапроса = ПроверочныйЗапрос.Текст;
				Отчет.Вывести(СтрокаКорректностьЗаполненияСправочников);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	
	Если НЕ ЕстьОшибки Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаполненияСправочников");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 5. Проблемы с заполнением основных справочников в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		Отчет.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецФункции // ПроверитьЗаполнениеСправочников(Отчет)()


#КонецОбласти 

#Область ПроверкиКорректностиУчета

//проверяем чтобы остатки автомобиля не развернулись по нескольким партиям 
Функция ПроверитьКорректностьОстатковТоварныхАвтомобилей()
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	СУММА(ОстаткиАвтомобилейОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ОстаткиАвтомобилейОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ОстаткиАвтомобилейОстатки.СуммаНДСОстаток) КАК СуммаНДС,
	|	СУММА(ОстаткиАвтомобилейОстатки.СуммаУпрОстаток) КАК СуммаУпр,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиАвтомобилейОстатки.Партия) КАК КоличествоПартий
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&ДатаСведений, СтатусПартии = &НужныйСтатусПартии) КАК ОстаткиАвтомобилейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(&ДатаСведений, ВидЗначения = &ВидЗначенияВидАвтомобиля) КАК АвтомобилиСрезПоследних
	|		ПО ОстаткиАвтомобилейОстатки.Автомобиль = АвтомобилиСрезПоследних.Автомобиль
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАвтомобилейОстатки.СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.Автомобиль
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоПартий УБЫВ";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаСведений", КонецДня(НаДату));
	Запрос.УстановитьПараметр("НужныйСтатусПартии", Перечисления.СтатусыПартий.ТоварКупленный);
	Запрос.УстановитьПараметр("ВидАвтомобиляСПробегом", Перечисления.ВидАвтомобиля.АвтомобильСПробегом);
	Запрос.УстановитьПараметр("ВидЗначенияВидАвтомобиля", Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПроблемныйАвтомобиль = Выборка.Автомобиль;	
		КоличествоПартий = Выборка.КоличествоПартий;
		СтрокаСообщения = "Проблема с остатками автомобилей. Как минимум, автомобиль: " + СокрЛП(ПроблемныйАвтомобиль) + " числится в остатке более чем по одной партии!
		|Более подробно можно посмотреть отчетом по остаткам автомобилей, с группировкой по автомобилям и партиям.
		|Скорее всего нарушена последовательность редактирования данных.
		|Сверка данных с новой программой после миграции будет затруднена, информация будет различаться.";
		Сообщить(СтрокаСообщения,СтатусСообщения.Важное);
	КонецЕсли; 
КонецФункции // ()

//проверяем корректность остатков заказов покупателей
//замечены ситуации когда остаток резерва больше чем остаток заказано
Функция ПроверитьКорректностьОстатковЗаказовПокупателей(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	#Если Клиент Тогда
		Состояние("Проверка корректности остатков заказов покупателей товаров...");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.Номенклатура.Артикул КАК Артикул,
	               |	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0)) КАК Количество,
	               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0)) КАК Резерв,
	               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток, 0)) КАК Сумма,
	               |	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0)) КАК СуммаУпр,
	               |	ВЫБОР
	               |		КОГДА ЗаказыПокупателейОстатки.Заказ.СкладКомпании = ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ОсновнойСкладКомпании)
	               |		ИНАЧЕ ЗаказыПокупателейОстатки.Заказ.СкладКомпании
	               |	КОНЕЦ КАК СкладКомпании,
	               |	ЗаказыПокупателейОстатки.Заказ.Автомобиль КАК Автомобиль,
	               |	ЗаказыПокупателейОстатки.Заказ.Менеджер КАК Менеджер,
	               |	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	ЗаказыПокупателейОстатки.Заказ.Контрагент КАК Контрагент,
	               |	ЗаказыПокупателейОстатки.Заказ.Карточка КАК Карточка,
	               |	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	               |	ЗаказыПокупателейОстатки.Заказ.Организация КАК Организация,
	               |	ЗаказыПокупателейОстатки.Заказ.ПодразделениеКомпании КАК ПодразделениеКомпании,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Заказ.ПроцентПредоплаты, 0) КАК ПроцентПредоплаты,
	               |	ЗаказыПокупателейОстатки.Заказ.ТипЦен КАК ТипЦен,
	               |	ЗаказыПокупателейОстатки.Заказ.СрокПоставки КАК СрокПоставки,
	               |	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) КАК Коэффициент,
	               |	ЕСТЬNULL(ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения, ЗНАЧЕНИЕ(Справочник.ЯчейкиХранения.ПустаяСсылка)) КАК Ячейка,
	               |	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			&ДатаСведений,
	               |			Заказ ССЫЛКА Документ.ЗаказПокупателя
	               |				И НЕ Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	               |				И НЕ Заказ.Дата ЕСТЬ NULL) КАК ЗаказыПокупателейОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЯчейкиХраненияПоУмолчанию КАК ЯчейкиХраненияПоУмолчанию
	               |		ПО ЗаказыПокупателейОстатки.Номенклатура = ЯчейкиХраненияПоУмолчанию.Номенклатура
	               |			И ЗаказыПокупателейОстатки.СкладКомпании = ЯчейкиХраненияПоУмолчанию.СкладКомпании
	               |ГДЕ
	               |	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	               |	И ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) < ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыПокупателейОстатки.Заказ,
	               |	ЕСТЬNULL(ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения, ЗНАЧЕНИЕ(Справочник.ЯчейкиХранения.ПустаяСсылка)),
	               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	               |	ЗаказыПокупателейОстатки.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЗаказыПокупателейОстатки.Заказ.СкладКомпании = ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ОсновнойСкладКомпании)
	               |		ИНАЧЕ ЗаказыПокупателейОстатки.Заказ.СкладКомпании
	               |	КОНЕЦ,
	               |	ЗаказыПокупателейОстатки.Заказ.Автомобиль,
	               |	ЗаказыПокупателейОстатки.Заказ.Менеджер,
	               |	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов,
	               |	ЗаказыПокупателейОстатки.Заказ.Контрагент,
	               |	ЗаказыПокупателейОстатки.Заказ.Карточка,
	               |	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
	               |	ЗаказыПокупателейОстатки.Заказ.Организация,
	               |	ЗаказыПокупателейОстатки.Заказ.ПодразделениеКомпании,
	               |	ЗаказыПокупателейОстатки.Заказ.ТипЦен,
	               |	ЗаказыПокупателейОстатки.Заказ.СрокПоставки,
	               |	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения,
	               |	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Заказ.ПроцентПредоплаты, 0),
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0)
	               |ИТОГИ
	               |	МАКСИМУМ(СкладКомпании)
	               |ПО
	               |	Заказ,
	               |	Номенклатура";
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаСведений", КонецДня(НаДату));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Количество = Null и НЕ Выборка.Резерв = Null Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", ";
			|") + СокрЛП(Выборка.Артикул) + ", " + СокрЛП(Выборка.Номенклатура) + ", по заказу: " + СокрЛП(Выборка.Заказ) + ", остаток заказано = " + Формат(Выборка.Количество, "ЧГ=0") + ", а остаток резерв = " + Формат(Выборка.Резерв, "ЧГ=0");
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаказовПокупателей");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 7. Обнаружены проблема с остатками заказов покупателей в базе-источнике! Перенос данных без ошибок не возможен.
		|Проверить можно отчетом 'Остатки заказов покупателей' с группировками: 'Заказ - Номенклатура' и с выводом показателей 'Заказано' и	'Резерв'.
		|Резерв, который больше Заказано, будет уменьшен до значения Заказано.
		|Вот список проблемных позиций: 
		|" + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьЗаказовПокупателей");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 7. Проблем с остатками заказов покупателей товаров в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
	
КонецФункции // ()


Функция ПроверкаКорректностиОстатковКупленныхИПринятыхНаКомиссиюТоваров(Отчет) Экспорт
	ЕстьОшибки  = Ложь;
	СтрокаСообщения = "";
	МакетОформления = ПолучитьМакет("Макет");
	
	#Если Клиент Тогда
		Состояние("Проверка корректности остатков купленных и принятых на комиссию товаров...");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстаткиТоваровКомпании.Номенклатура.Артикул КАК Артикул,
	|	ОстаткиТоваровКомпании.СкладКомпании КАК СкладКомпании,
	|	ОстаткиТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпании.КоличествоОстаток КАК КоличествоОстаток,
	|	ОстаткиТоваровКомпании.РезервОстаток КАК РезервОстаток,
	|	ОстаткиТоваровКомпании.СвободныйОстаток КАК СвободныйОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
	|		ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|		СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ОстаткиТоваровКомпанииОстатки.РезервОстаток) КАК РезервОстаток,
	|		СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток) КАК СвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ОстаткиТоваровКомпании.Остатки КАК ОстаткиТоваровКомпанииОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОстаткиТоваровКомпанииОстатки.Номенклатура,
	|		ОстаткиТоваровКомпанииОстатки.СкладКомпании) КАК ОстаткиТоваровКомпании
	|ГДЕ
	|	ОстаткиТоваровКомпании.СвободныйОстаток < 0";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", ";
		|") + СокрЛП(Выборка.Артикул) + ", " + СокрЛП(Выборка.Номенклатура) + ", на складе: " + СокрЛП(Выборка.СкладКомпании) + ", свободный остаток = " + Формат(Выборка.СвободныйОстаток, "ЧГ=0");
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ЕстьОшибки = Истина;
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьОстатковТоваров");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 6. Обнаружены отрицательные остатки товаров в базе-источнике! Перенос данных без ошибок не возможен.
		|Проверить можно отчетом 'Остатки товаров' с группировками: 'Склад компании - Номенклатура' и с выводом показателя 'Свободный остаток'.
		|При переносе 'Остатки_СобственныхиИПринятыхНаКомиссиюТоваров' - будут отличаться данные в приемнике и источнике.
		|При переносе 'ОстаткиЗаказовПокупателя' некоторые заказы не смогут зарезервировать товар. Рекомендуем переносить 'Заказы покупателей' вручную.
		|Вот список проблемных позиций: 
		|" + СтрокаСообщения;
		Отчет.Вывести(ШапкаПроверки);
	Иначе
		ШапкаПроверки = МакетОформления.ПолучитьОбласть("ШапкаКорректностьОстатковТоваров");
		ШапкаПроверки.Параметры.ТекстШапкиПроверки = "Проверка 6. Отрицательные остатки товаров в базе-источнике не обнаружены.";
		Отчет.Вывести(ШапкаПроверки);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибки", ЕстьОшибки);
	Возврат СтруктураПараметров;
КонецФункции // ()

#КонецОбласти 

#Область ОценкаОбъема

//считаем записи во всех справочниках
Функция ПодсчетСправочников(Отчет) Экспорт
	//Отчет = новый ТабличныйДокумент;
	
	МакетОформления = ПолучитьМакет("Макет");
	ШапкаПодсчетаСправочников = МакетОформления.ПолучитьОбласть("ШапкаПодсчетаСправочников");
	Отчет.Вывести(ШапкаПодсчетаСправочников);
	Отчет.НачатьГруппуСтрок("Количество справочников", Ложь);
	
	#Если Клиент Тогда
		Состояние("Подсчет элементов справочников...");
	#КонецЕсли
	
	ТаблЗнач = Новый ТаблицаЗначений;
	ТаблЗнач.Колонки.Добавить("ИмяСправочника");
	ТаблЗнач.Колонки.Добавить("КоличествоЗаписей");
	ШаблонТекстЗапроса = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ XYZ.Ссылка) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.XYZ КАК XYZ";
	Запрос = Новый Запрос;
	Для каждого Спр Из Метаданные.Справочники Цикл
		КоличествоЗаписей = 0;
		ИмяСправочника = Спр.Имя;
		ТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "XYZ", ИмяСправочника);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоЗаписей = Выборка.КоличествоЗаписей;
		КонецЕсли;
		
		НовСтр = ТаблЗнач.Добавить();
		НовСтр.ИмяСправочника = ИмяСправочника;
		НовСтр.КоличествоЗаписей = КоличествоЗаписей;
	КонецЦикла; 
	
	ТаблЗнач.Сортировать("КоличествоЗаписей Убыв");
	Для каждого СтрТаблЗнач Из ТаблЗнач Цикл
		ИмяСправочника = СтрТаблЗнач.ИмяСправочника;
		КоличествоЗаписей = СтрТаблЗнач.КоличествоЗаписей;	
		СтрокаПодсчетаСправочников = МакетОформления.ПолучитьОбласть("СтрокаПодсчетаСправочников");
		СтрокаПодсчетаСправочников.Параметры.ИмяСправочника = ИмяСправочника;
		СтрокаПодсчетаСправочников.Параметры.КоличествоЗаписей = КоличествоЗаписей;
		Отчет.Вывести(СтрокаПодсчетаСправочников);
	КонецЦикла; 
	Отчет.ЗакончитьГруппуСтрок();
	Возврат Истина;
КонецФункции // ()

//считаем записи всех выгружаемых остатков
Функция ПодсчетОстатков(Отчет) Экспорт
	
	//Остатки_СобственныхиИПринятыхНаКомиссиюТоваров
	ПодсчетОстатки_СобственныхиИПринятыхНаКомиссиюТоваров(Отчет);
	
	//ОстаткиТоваровОрдерныйСклад
	ПодсчетОстаткиТоваровОрдерныйСклад(Отчет);
	
	//Остатки_НезавершенноеПроизводство
	ПодсчетОстатки_НезавершенноеПроизводство(Отчет);
	
	//Остатки_ЗаказыПокупателя
	ПодсчетОстатки_ЗаказыПокупателя(Отчет);
	
	//Остатки_ЗаказыВнутренние
	ПодсчетОстатки_ЗаказыВнутренние(Отчет);
	
	//todo
	//ПодсчетОстатки_Взаиморасчеты(Отчет);
	//ПодсчетОстаткиКупленныхАвтомобилей(Отчет);
	//ПодсчетОстаткиПринятыхНаКомиссиюАвтомобилей(Отчет);
	//ПодсчетОстаткиПереданныхНаКомиссиюАвтомобилей(Отчет);
	//ПодсчетОстатки_ЗаказыНаАвтомобиль(Отчет);
	//ПодсчетОстатки_ЗаказыПоставщикуНаАвтомобиль(Отчет);
	//ПодсчетОстаткиАвтомобилейОрдерныйСклад(Отчет);
	//ПодсчетОстаткиАвтомобилейВТестДрайве(Отчет);
	//
	//ПодсчетЯчейкиХраненияПоУмолчанию(Отчет);
	//ПодсчетКонтактныеЛицаКонтрагентов(Отчет);
	//ПодсчетДополнительныеРеквизитыНоменклатуры_РегистрСвед(Отчет);
	//ПодсчетШтрихКоды_НоменклатурыИКарточек(Отчет);
	//ПодсчетАвтомобили_РегистрСведений(Отчет);
	//ПодсчетРекомендацииПоАвтомобилю(Отчет);
	//ПодсчетВыполнениеСервисныхКампаний(Отчет);
	//ПодсчетПодсчетЦены_Номенклатуры_УстановкаЦенКомпании(Отчет);
	//ПодсчетЦены_Номенклатуры_УстановкаЦенКонтрагента(Отчет);
	//ПодсчетЦены_Автомобилей(Отчет);
	//ПодсчетЦены_Авторабот(Отчет);
	//ПодсчетЦены_Опций(Отчет);
	
	
КонецФункции // ПодсчетОстатков()

//Остатки_СобственныхиИПринятыхНаКомиссиюТоваров
Процедура ПодсчетОстатки_СобственныхиИПринятыхНаКомиссиюТоваров(Отчет)
	
	МакетОформления = ПолучитьМакет("Макет");
	ШапкаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("ШапкаПодсчетаОстатков");
	Отчет.Вывести(ШапкаПодсчетаОстатков);
	Отчет.НачатьГруппуСтрок("Количество учетных остатков", Ложь);
	
	#Если Клиент Тогда
		Состояние("Подсчет записей учетных остатков...");
	#КонецЕсли
	
	//Остатки_СобственныхиИПринятыхНаКомиссиюТоваров
	ВидОстатка = "Остатки собственных и принятых на комиссию товаров";
	ПроверочныйЗапрос = Новый Запрос;
	ПроверочныйЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
	|	ПартииТоваровКомпанииОстатки.Партия КАК Партия,
	|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ПартииТоваровКомпанииОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ПартииТоваровКомпанииОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ПартииТоваровКомпанииОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	|	СУММА(ПартииТоваровКомпанииОстатки.СуммаНДСОстаток) КАК СуммаНДСОстаток
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки КАК ПартииТоваровКомпанииОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпанииОстатки.СкладКомпании,
	|	ПартииТоваровКомпанииОстатки.Партия,
	|	ПартииТоваровКомпанииОстатки.Номенклатура,
	|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры";
	РезультатПроверочныйЗапрос = ПроверочныйЗапрос.Выполнить();
	ТаблицаОстатков = РезультатПроверочныйЗапрос.Выгрузить();
	КоличествоЗаписей = ТаблицаОстатков.Количество();
	СтрокаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("СтрокаПодсчетаОстатков");
	СтрокаПодсчетаОстатков.Параметры.ВидОстатка = ВидОстатка;
	СтрокаПодсчетаОстатков.Параметры.КоличествоЗаписей = КоличествоЗаписей;
	Отчет.Вывести(СтрокаПодсчетаОстатков);
КонецПроцедуры

//ОстаткиТоваровОрдерныйСклад
Процедура ПодсчетОстаткиТоваровОрдерныйСклад(Отчет)
	
	МакетОформления = ПолучитьМакет("Макет");
	ШапкаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("ШапкаПодсчетаОстатков");
	Отчет.Вывести(ШапкаПодсчетаОстатков);
	Отчет.НачатьГруппуСтрок("Количество учетных остатков", Ложь);
	
	#Если Клиент Тогда
		Состояние("Подсчет записей учетных остатков...");
	#КонецЕсли
	
	//ОстаткиТоваровОрдерныйСклад
	ВидОстатка = "Остатки товаров на ордерных складах";
	ПроверочныйЗапрос = Новый Запрос;
	ПроверочныйЗапрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
	|	ОстаткиТоваровОрдерныйСкладОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки КАК ОстаткиТоваровОрдерныйСкладОстатки
	|ГДЕ
	|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток > 0
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	СкладКомпании,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Ячейка";
	РезультатПроверочныйЗапрос = ПроверочныйЗапрос.Выполнить();
	ТаблицаОстатков = РезультатПроверочныйЗапрос.Выгрузить();
	КоличествоЗаписей = ТаблицаОстатков.Количество();
	СтрокаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("СтрокаПодсчетаОстатков");
	СтрокаПодсчетаОстатков.Параметры.ВидОстатка = ВидОстатка;
	СтрокаПодсчетаОстатков.Параметры.КоличествоЗаписей = КоличествоЗаписей;
	Отчет.Вывести(СтрокаПодсчетаОстатков);
КонецПроцедуры

//Остатки_НезавершенноеПроизводство
Процедура ПодсчетОстатки_НезавершенноеПроизводство(Отчет)
	
	МакетОформления = ПолучитьМакет("Макет");
	ШапкаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("ШапкаПодсчетаОстатков");
	Отчет.Вывести(ШапкаПодсчетаОстатков);
	Отчет.НачатьГруппуСтрок("Количество учетных остатков", Ложь);
	
	#Если Клиент Тогда
		Состояние("Подсчет записей учетных остатков...");
	#КонецЕсли
	
	//Остатки_НезавершенноеПроизводство
	ВидОстатка = "Остатки товаров в незавершенном производстве";
	ПроверочныйЗапрос = Новый Запрос;
	ПроверочныйЗапрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыВПроизводствеОстатки.Цех КАК Цех,
	|	ТоварыВПроизводствеОстатки.ЗаказНаряд КАК ЗаказНаряд,
	|	ТоварыВПроизводствеОстатки.Партия КАК Партия,
	|	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ТоварыВПроизводствеОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ТоварыВПроизводствеОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	|	СУММА(ТоварыВПроизводствеОстатки.СуммаНДСОстаток) КАК СуммаНДСОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве.Остатки КАК ТоварыВПроизводствеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводствеОстатки.Цех,
	|	ТоварыВПроизводствеОстатки.ЗаказНаряд,
	|	ТоварыВПроизводствеОстатки.Партия,
	|	ТоварыВПроизводствеОстатки.Номенклатура,
	|	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры";
	РезультатПроверочныйЗапрос = ПроверочныйЗапрос.Выполнить();
	ТаблицаОстатков = РезультатПроверочныйЗапрос.Выгрузить();
	КоличествоЗаписей = ТаблицаОстатков.Количество();
	СтрокаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("СтрокаПодсчетаОстатков");
	СтрокаПодсчетаОстатков.Параметры.ВидОстатка = ВидОстатка;
	СтрокаПодсчетаОстатков.Параметры.КоличествоЗаписей = КоличествоЗаписей;
	Отчет.Вывести(СтрокаПодсчетаОстатков);
КонецПроцедуры

//Остатки_ЗаказыПокупателя
Процедура ПодсчетОстатки_ЗаказыПокупателя(Отчет)
	
	МакетОформления = ПолучитьМакет("Макет");
	ШапкаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("ШапкаПодсчетаОстатков");
	Отчет.Вывести(ШапкаПодсчетаОстатков);
	Отчет.НачатьГруппуСтрок("Количество учетных остатков", Ложь);
	
	#Если Клиент Тогда
		Состояние("Подсчет записей учетных остатков...");
	#КонецЕсли
	//Остатки_ЗаказыПокупателя
	ВидОстатка = "Остатки заказов покупателей";
	ПроверочныйЗапрос = Новый Запрос;
	ПроверочныйЗапрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0)) КАК Резерв,
	|	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0)) КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.Заказ.СкладКомпании = ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ОсновнойСкладКомпании)
	|		ИНАЧЕ ЗаказыПокупателейОстатки.Заказ.СкладКомпании
	|	КОНЕЦ КАК СкладКомпании,
	|	ЗаказыПокупателейОстатки.Заказ.Автомобиль КАК Автомобиль,
	|	ЗаказыПокупателейОстатки.Заказ.Менеджер КАК Менеджер,
	|	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.Заказ.Контрагент КАК Контрагент,
	|	ЗаказыПокупателейОстатки.Заказ.Карточка КАК Карточка,
	|	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	|	ЗаказыПокупателейОстатки.Заказ.Организация КАК Организация,
	|	ЗаказыПокупателейОстатки.Заказ.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.Заказ.ПроцентПредоплаты, 0) КАК ПроцентПредоплаты,
	|	ЗаказыПокупателейОстатки.Заказ.ТипЦен КАК ТипЦен,
	|	ЗаказыПокупателейОстатки.Заказ.СрокПоставки КАК СрокПоставки,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0) КАК Коэффициент,
	|	ЕСТЬNULL(ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения, ЗНАЧЕНИЕ(Справочник.ЯчейкиХранения.ПустаяСсылка)) КАК Ячейка,
	|	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|			Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И НЕ Заказ.Дата ЕСТЬ NULL) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЯчейкиХраненияПоУмолчанию КАК ЯчейкиХраненияПоУмолчанию
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЯчейкиХраненияПоУмолчанию.Номенклатура
	|			И ЗаказыПокупателейОстатки.СкладКомпании = ЯчейкиХраненияПоУмолчанию.СкладКомпании
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателейОстатки.Заказ,
	|	ЕСТЬNULL(ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения, ЗНАЧЕНИЕ(Справочник.ЯчейкиХранения.ПустаяСсылка)),
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.Заказ.СкладКомпании = ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ОсновнойСкладКомпании)
	|		ИНАЧЕ ЗаказыПокупателейОстатки.Заказ.СкладКомпании
	|	КОНЕЦ,
	|	ЗаказыПокупателейОстатки.Заказ.Автомобиль,
	|	ЗаказыПокупателейОстатки.Заказ.Менеджер,
	|	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.Заказ.Контрагент,
	|	ЗаказыПокупателейОстатки.Заказ.Карточка,
	|	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.Заказ.Организация,
	|	ЗаказыПокупателейОстатки.Заказ.ПодразделениеКомпании,
	|	ЗаказыПокупателейОстатки.Заказ.ТипЦен,
	|	ЗаказыПокупателейОстатки.Заказ.СрокПоставки,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.Заказ.ПроцентПредоплаты, 0),
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент, 0)
	|ИТОГИ
	|	МАКСИМУМ(СкладКомпании)
	|ПО
	|	Заказ,
	|	Номенклатура";
	РезультатПроверочныйЗапрос = ПроверочныйЗапрос.Выполнить();
	ТаблицаОстатков = РезультатПроверочныйЗапрос.Выгрузить();
	КоличествоЗаписей = ТаблицаОстатков.Количество();
	СтрокаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("СтрокаПодсчетаОстатков");
	СтрокаПодсчетаОстатков.Параметры.ВидОстатка = ВидОстатка;
	СтрокаПодсчетаОстатков.Параметры.КоличествоЗаписей = КоличествоЗаписей;
	Отчет.Вывести(СтрокаПодсчетаОстатков);
	
КонецПроцедуры

//Остатки_ЗаказыВнутренние
Процедура ПодсчетОстатки_ЗаказыВнутренние(Отчет)
	
	МакетОформления = ПолучитьМакет("Макет");
	ШапкаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("ШапкаПодсчетаОстатков");
	Отчет.Вывести(ШапкаПодсчетаОстатков);
	Отчет.НачатьГруппуСтрок("Количество учетных остатков", Ложь);
	
	#Если Клиент Тогда
		Состояние("Подсчет записей учетных остатков...");
	#КонецЕсли
	
	//Остатки_ЗаказыВнутренние                          
	ВидОстатка = "Остатки внутренних заказов";
	ПроверочныйЗапрос = Новый Запрос;
	ПроверочныйЗапрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) / СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток)
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|			Заказ ССЫЛКА Документ.ЗаказВнутренний
	|				И НЕ Заказ = ЗНАЧЕНИЕ(Документ.ЗаказВнутренний.ПустаяСсылка)
	|				И НЕ Заказ.Дата ЕСТЬ NULL) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателейОстатки.Заказ,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.Заказ.СкладКомпании = ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ОсновнойСкладКомпании)
	|		ИНАЧЕ ТаблицаЗаказов.Заказ.СкладКомпании
	|	КОНЕЦ КАК СкладКомпании,
	|	ТаблицаЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказов.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЗаказов.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ТаблицаЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаЗаказов.Количество КАК Количество,
	|	ТаблицаЗаказов.Цена КАК Цена,
	|	ЕСТЬNULL(ЗаказыРаспределение.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.Количество = 0
	|			ТОГДА 0
	|		КОГДА ЗаказыРаспределение.КоличествоОстаток ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ЗаказыРаспределение.КоличествоОстаток
	|	КОНЕЦ КАК Распределено,
	|	ЗаказВнутренний.Организация КАК Организация,
	|	ЗаказВнутренний.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЗаказВнутренний.ТипЦен КАК ТипЦен,
	|	ЗаказВнутренний.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	|	ЗаказВнутренний.ВалютаДокумента КАК ВалютаДокумента
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(, ЗаказПоставщика ССЫЛКА Документ.ЗаказВнутренний) КАК ЗаказыРаспределение
	|		ПО ТаблицаЗаказов.Заказ = ЗаказыРаспределение.ЗаказПоставщика
	|			И ТаблицаЗаказов.Номенклатура = ЗаказыРаспределение.Номенклатура
	|			И ТаблицаЗаказов.ХарактеристикаНоменклатуры = ЗаказыРаспределение.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказВнутренний КАК ЗаказВнутренний
	|		ПО ТаблицаЗаказов.Заказ = ЗаказВнутренний.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(СкладКомпании),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(Цена),
	|	СУММА(Распределено),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(ПодразделениеКомпании),
	|	МАКСИМУМ(ТипЦен),
	|	МАКСИМУМ(ПодразделениеПолучатель),
	|	МАКСИМУМ(ВалютаДокумента)
	|ПО
	|	Заказ,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	РезультатПроверочныйЗапрос = ПроверочныйЗапрос.Выполнить();
	ТаблицаОстатков = РезультатПроверочныйЗапрос.Выгрузить();
	КоличествоЗаписей = ТаблицаОстатков.Количество();
	СтрокаПодсчетаОстатков = МакетОформления.ПолучитьОбласть("СтрокаПодсчетаОстатков");
	СтрокаПодсчетаОстатков.Параметры.ВидОстатка = ВидОстатка;
	СтрокаПодсчетаОстатков.Параметры.КоличествоЗаписей = КоличествоЗаписей;
	Отчет.Вывести(СтрокаПодсчетаОстатков);
	
КонецПроцедуры


#КонецОбласти 

#Область Общее

Процедура ЗаполнитьВидыПроверок() Экспорт
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "1. Дублирование кодов в справочниках";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "2. Разсинхронизация в предопределенных элементах справочника 'СкладыКомпании'";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "3. Разсинхронизация в предопределенных элементах справочника 'Номенклатура'";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "4. Разсинхронизация в предопределенных элементах справочника 'Контрагенты'";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "5. Проверка заполнения обязательных реквизитов в основных справочниках";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "6. Проверка корректности остатков товаров на складах";
	НС.Проверять = Истина;
	
	НС = ТаблицаПроверок.Добавить();
	НС.ВидПроверки = "7. Проверка корректности остатков заказов покупателей товаров";
	НС.Проверять = Истина;
	
	
КонецПроцедуры

#КонецОбласти 